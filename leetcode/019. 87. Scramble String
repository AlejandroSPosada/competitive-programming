class Solution {
public:
    int memo[31][31][32];
    string s1;
    string s2;
        bool dfs(int idx1, int idx2, int len){
            if(memo[idx1][idx2][len]!=-1)return (memo[idx1][idx2][len]==1);
            if(len==1&&s1[idx1]==s2[idx2]) return true;
            int count[26];
            memset(count,0,sizeof(count));
            for(int i = 0;i<len;i++){
                count[s1[idx1+i]-'a']++;
                count[s2[idx2+i]-'a']--;
            }
            for(int i = 0;i<26;i++){
                if(count[i]!=0){
                    memo[idx1][idx2][len] = 0;
                    return false;
                }
            }
            for(int i = 1;i<len;i++){
                if ((dfs(idx1, idx2, i) && dfs(idx1 + i, idx2 + i, len - i)) ||
                    (dfs(idx1, idx2 + len - i, i) && dfs(idx1 + i, idx2, len - i))) {
                    memo[idx1][idx2][len] = 1;
                    return true;
                }
            }
            memo[idx1][idx2][len] = 0;
            return false;
        };
    bool isScramble(string a, string b) {
        const int sz = a.size();
        s1=a;
        s2=b;
        memset(memo,-1,sizeof(memo));
        return dfs(0,0,sz);
    }
};
