class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (!wordSet.count(endWord)) return 0;
        wordSet.erase(endWord);
        unordered_set<string> beginSet, endSet, visited;
        beginSet.insert(beginWord);
        endSet.insert(endWord);
        int dist = 1;
        while (!beginSet.empty() && !endSet.empty()) {
            if (beginSet.size() > endSet.size())
                swap(beginSet, endSet);
            unordered_set<string> tempSet;
            for (const string& word : beginSet) {
                string currentWord = word;
                for (int i = 0; i < currentWord.size(); i++) {
                    char originalChar = currentWord[i];
                    for (char c = 'a'; c <= 'z'; c++) {
                        currentWord[i] = c;
                        if (endSet.count(currentWord)) 
                            return dist + 1;
                        if (wordSet.count(currentWord)) {
                            tempSet.insert(currentWord);
                            wordSet.erase(currentWord);
                        }
                    }
                    currentWord[i] = originalChar; // Restore original character
                }
            }
            beginSet = tempSet;
            dist++;
        }
        return 0;
    }
};

/*
 "hit" "cog"
 {"hot", "dot", "dog", "lot", "log", "cog"}

1WHILE
hit, 
cog, 
  2FOR: word: hit
    3FOR: original_char: h
    3FOR: original_char: i
      IN DICTIONARY: hot
    3FOR: original_char: t
1WHILE
hot, 
cog, 
  2FOR: word: hot
    3FOR: original_char: h
      IN DICTIONARY: dot
      IN DICTIONARY: lot
    3FOR: original_char: o
    3FOR: original_char: t
1WHILE
lot, dot, 
cog, 
  2FOR: word: cog
    3FOR: original_char: c
      IN DICTIONARY: dog
      IN DICTIONARY: log
    3FOR: original_char: o
    3FOR: original_char: g
1WHILE
log, dog, 
lot, dot, 
  2FOR: word: log
    3FOR: original_char: l
      IN DICTIONARY: cog
    3FOR: original_char: o
    3FOR: original_char: g
******LADER:  lot
5
*/
