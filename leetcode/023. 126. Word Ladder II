class Solution {
public:
    bool isConnected(const string& s1, const string& s2){
        // assume s1 always has the same length with s2
        int diff = 0;
        for (int i = 0; i < s1.length(); ++i) {
            diff += static_cast<int>(s1[i] != s2[i]);
            if (diff > 1) {
                return false;
            }
        }
        return diff == 1;
    }
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end());
        if (dict.find(endWord) == dict.end()) {
            return {};
        } else if (beginWord == endWord) {
            return {{beginWord, endWord}};
        }
        deque<vector<string>> result;        
        vector<vector<string>> level_nodes;   
        bool reached = false;
        level_nodes.push_back({beginWord});
        while (!dict.empty() && !reached) {
            vector<string> curr_level;

            for (const string& from : level_nodes.back()) {
                for (auto iter = dict.begin(); iter != dict.end(); ) {
                    if (!isConnected(from, *iter)) {
                        ++iter;
                        continue;
                    }
                    if (*iter == endWord) {
                        reached = true;
                        break;
                    }
                    curr_level.push_back(*iter);
                    iter = dict.erase(iter);
                }               
            }
            // found endWord this level
            if (reached || curr_level.empty()) {
                break;
            }
            // otherwise, record all nodes for the current level
            level_nodes.push_back(move(curr_level));            
        }
        // try but not find
        if (!reached) {
            return {};
        }
        // move backward
        result.push_back({endWord});          
        for (int level = level_nodes.size() - 1; level >= 0; level--) {                        
            int level_size = result.size();
            while (level_size--) {
                vector<string> path = move(result.front());
                result.pop_front();
                for (const string &to : level_nodes[level]) {                    
                    if (!isConnected(path.front(), to)) {
                        continue;
                    }
                    result.push_back({to});
                    result.back().insert(result.back().end(), path.begin(), path.end());
                }    
            }             
        }
        return {result.begin(), result.end()};
    }
};
