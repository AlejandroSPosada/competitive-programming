class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, long t) {
        int minx = INT_MAX, maxx = INT_MIN;
        for (const auto & i : nums) {
            minx = min(minx, i);
            maxx = max(maxx, i);
        }
        // if for instance, max = 20 and min = 3 and t = 2, then we want to store all the numbers
        // between [3,20] in a capacity bucket of t+1. We sum + 1 because inclusion [3,20] demands it
        int n = ((long)maxx - (long)minx) / (t + 1) + 1;
        // -(k+1) because it's beyong the ranges (worst case i = 0)
        vector<int> buckets(n, -(k + 1));
        for (int i = 0, j; i < nums.size(); i++) {
            j = ((long)nums[i] - (long)minx) / (t + 1);
            if ((i - buckets[j] <= k) || 
            (j && i - buckets[j - 1] <= k && (long)nums[i] - (long)nums[buckets[j - 1]] <= t) || 
            (j < n-1 && i - buckets[j + 1] <= k && (long)nums[buckets[j + 1]] - (long)nums[i] <= t))
                return true;
            buckets[j] = i;
        }
        return false;
    }
};

/*min = 3, max =  21
t = 2, k = 2
nums = {15,7,20,5,15,21,8,3};
n = 18 / 3 + 1 = 7

buckets: formula ((long)nums[i] - (long)minx) / (t + 1);
0 -> 3,4,5
1 -> 6,7,8
2 -> 9,10,11
3 -> 12,13,14
4 -> 15,16,17
5 -> 18,19,20
6 -> 21	

3, 21, 7
-3,-3,-3,-3,-3,-3,-3,
IIII: 0, JJJJ: 4
-3,-3,-3,-3,0,-3,-3,
IIII: 1, JJJJ: 1
-3,1,-3,-3,0,-3,-3,
IIII: 2, JJJJ: 5
-3,1,-3,-3,0,2,-3,
IIII: 3, JJJJ: 0
 SOOOOO TRUEEEEEEE 
3,1,-3,-3,0,2,-3,
IIII: 4, JJJJ: 4
3,1,-3,-3,4,2,-3,
IIII: 5, JJJJ: 6
3,1,-3,-3,4,2,5,
IIII: 6, JJJJ: 1
3,6,-3,-3,4,2,5,
IIII: 7, JJJJ: 0
XXX
0
/*
