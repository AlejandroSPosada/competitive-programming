#include<bits/stdc++.h>
using namespace std;

const int MAXN = 2e6 + 10;
const int MAXQ = 1e6 + 10;

struct FenwickUpdate {
    int node;
    int direction;
    int queryIndex;
    FenwickUpdate(int n, int d, int q) : node(n), direction(d), queryIndex(q) {};
};

int automaton[MAXN][26], acceptState[MAXN], nodeCount, nodeValues[MAXN];
int startTime[MAXN], finishTime[MAXN], subtreeSize[MAXN], bfsQueue[MAXN], failureLink[MAXN], auxiliary[MAXN];
long long fenwickTree[MAXN];
vector<FenwickUpdate> queryRanges[MAXQ];
long long queryResults[MAXN];

int addAutomatonNode(string& str) {
    int currentNode = 0;
    for (char& ch : str) {
        if (!automaton[currentNode][ch - 'a'])
            automaton[currentNode][ch - 'a'] = ++nodeCount;
        currentNode = automaton[currentNode][ch - 'a'];
    }
    return currentNode;
}

void completeAutomaton() {
    int k = 0, h = 0, currentNode;
    for (int i = 0; i < 26; i++) {
        if (automaton[0][i])
            bfsQueue[k++] = automaton[0][i];
    }
    while (h < nodeCount) {
        int currentNode = bfsQueue[h++];
        for (int i = 0; i < 26; i++) {
            if (automaton[currentNode][i]) {
                failureLink[automaton[currentNode][i]] = automaton[failureLink[currentNode]][i];
                bfsQueue[k++] = automaton[currentNode][i];
            } else {
                automaton[currentNode][i] = automaton[failureLink[currentNode]][i];
            }
        }
    }
    fill(subtreeSize, subtreeSize + nodeCount + 1, 1);
    for (int i = nodeCount; ~i; i--) 
        subtreeSize[failureLink[bfsQueue[i]]] += subtreeSize[bfsQueue[i]];
    auxiliary[0] = 1;
    for (int i = 0; i < nodeCount; i++) {
        currentNode = bfsQueue[i];
        startTime[currentNode] = auxiliary[failureLink[currentNode]];
        auxiliary[failureLink[currentNode]] = finishTime[currentNode] = startTime[currentNode] + subtreeSize[currentNode];
        auxiliary[currentNode] = startTime[currentNode] + 1;
    }
}

void addFenwickRange(int left, int right, int value) {
    for (left++; left < nodeCount + 2; left += left & -left)
        fenwickTree[left] += value;
    for (right++; right < nodeCount + 2; right += right & -right)
        fenwickTree[right] -= value;
}

long long getFenwickSum(int position) {
    long long sum = 0;
    for (; position; position -= position & -position)
        sum += fenwickTree[position];
    return sum;
}

int main() {
    int n;
    cin >> n;
    string str;
    for (int i = 0; i < n; i++) {
        cin >> str;
        acceptState[i] = addAutomatonNode(str);
    }
    for (int i = 0; i < n; i++) cin >> nodeValues[i];
    completeAutomaton();
    int m;
    cin >> m;
    int left, right, currentNode;
    for (int i = 0; i < m; i++) {
        cin >> left >> right >> str;
        right++;
        currentNode = 0;
        for (const char& c : str) {
            currentNode = automaton[currentNode][c - 'a'];
            queryRanges[left].push_back(FenwickUpdate(currentNode, -1, i));
            queryRanges[right].push_back(FenwickUpdate(currentNode, 1, i));
        }
    }
    for (int i = 0; i < n; i++) {
        addFenwickRange(startTime[acceptState[i]], finishTime[acceptState[i]], nodeValues[i]);
        for (FenwickUpdate x : queryRanges[i + 1]) {
            queryResults[x.queryIndex] += getFenwickSum(startTime[x.node] + 1) * x.direction;
        }
    }
    long long maxResult = -1, minResult = 1e18;
    for (int i = 0; i < m; i++) {
        maxResult = max(maxResult, queryResults[i]);
        minResult = min(minResult, queryResults[i]);
    }
    cout << minResult << " " << maxResult << endl;
    return 0;
}
