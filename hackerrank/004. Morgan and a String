#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;
typedef long long LL;
int T;
string A, B;
int NA, NB;
enum { STYPE, LTYPE };

struct SAIS {
    string str;
    vector<int>S, SA, lcp, rank;
    int A_SIZE;
    int N;

    vector<int>t, B;

    bool is_lms(int i) {
    return i>0 && t[i] == STYPE && t[i-1] == LTYPE;
    }
    void bucket() {
    B = vector<int>(A_SIZE);
    for (int i=0; i<N; i++) B[S[i]]++;
    for (int i=0; i<A_SIZE-1; i++) B[i+1] += B[i];
    }
    void induced_sort() {
        bucket();
        for (int i=0; i<N; i++) {
            int j = SA[i]-1;
            if (j >= 0 && t[j] == LTYPE) SA[B[S[j]-1]++] = j;
        }
        bucket();
        for (int i=N; i--; ) {
            int j = SA[i]-1;
            if (j >= 0 && t[j] == STYPE) SA[--B[S[j]]] = j;
        }
    }
    SAIS(const vector<int>&S, int A_SIZE) : S(S), A_SIZE(A_SIZE) {
    N = S.size();
    SA = vector<int>(N, -1);
    if (N==1) {
        SA[0] = 0;
        return;
    }
    t = vector<int>(N, STYPE);
    for (int i=N-1; i--;)
        if (S[i] > S[i+1] || (S[i] == S[i+1] && t[i+1] == LTYPE))
        t[i] = LTYPE;
    bucket();
    for (int i=N; i--;)
        if (is_lms(i)) SA[--B[S[i]]] = i;
    induced_sort();

    int N1 = 0;
    for (int i=0; i<N; i++) if (is_lms(SA[i])) SA[N1++] = SA[i];

    fill(SA.begin()+N1, SA.end(), -1);
    int name = 0, prev = -1;
    for (int i=0; i<N1; i++) {
        int cur = SA[i];
        bool diff = (prev == -1);
        for (int j=0; !diff; j++) {
            if (j>0 && is_lms(cur+j)) break;
            if (S[cur+j] != S[prev+j]) diff = true;
            }
        if (diff) name++;
        SA[N1+cur/2] = name-1;
        prev = cur;
    }
    vector<int> S1, SA1(N1);
    for (int i=N1; i<N; i++) if (SA[i]>=0) S1.push_back(SA[i]);
    if (name == N1) for (int i=0; i<N1; i++) SA1[S1[i]] = i;
    else SA1 = SAIS(S1, name).SA;

    N1 = 0;
    for (int i=0; i<N; i++) if (is_lms(i)) S1[N1++] = i;
    for (int i=0; i<N1; i++) SA1[i] = S1[SA1[i]];

    fill(SA.begin(), SA.end(), -1);
    bucket();
    for (int i=N1; i--;) {
        int j = SA1[i];
        SA[--B[S[j]]] = j;
    }
    induced_sort();
    }
    SAIS(const string &str) : str(str) {
    N = str.size()+1;
    S = vector<int>(N, 0);
    for (int i=0; i<N; i++) S[i] = str[i];
    *this = SAIS(S, 256);
    }
};

int main() {
    cin >> T;
    for (;T--;) {
    cin >> A >> B;
    NA = A.size();
    NB = B.size();

    string S = A + "a" + B + "a";
    SAIS sais(S);
    
    vector<int> r(S.size()+10);
    for (int i=0; i<sais.SA.size(); i++) r[sais.SA[i]] = i;
    
    int ia = 0, ib = 0;
    while (ia < NA && ib < NB){
        if (r[ia] < r[ib+NA+1]) putchar(A[ia++]);
        else putchar(B[ib++]);
    }

    while(ia<NA) putchar(A[ia++]);
    while(ib<NB) putchar(B[ib++]);
    putchar('\n');

    }
    
    return 0;
}
